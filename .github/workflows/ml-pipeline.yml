name: ML Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 httpx
        pip install -e .
        
    - name: Run linting
      run: |
        # Check for syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Run unit tests with coverage
      run: |
        # Run tests and generate coverage report
        pytest tests/ --cov=mlops_diabetes --cov-report=xml --cov-report=term-missing
        
    - name: Run model training
      run: |
        # Train the model
        python -m mlops_diabetes.train
        # Validate model performance
        python -m mlops_diabetes.validate_model --threshold-r2 0.4 --threshold-mse 4000
        
    - name: Cache model artifacts
      uses: actions/cache@v3
      with:
        path: models/
        key: ${{ runner.os }}-model-${{ github.sha }}
        
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        # Install Python dependencies
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 httpx
        pip install -e .
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y curl

    - name: Run tests and coverage
      run: |
        # Run all tests with coverage
        pytest tests/ --cov=mlops_diabetes --cov-report=xml
        # Display coverage report
        coverage report
        
    - name: Run linting
      run: |
        # Run flake8 for code quality
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Restore model artifacts
      uses: actions/cache@v3
      with:
        path: models/
        key: ${{ runner.os }}-model-${{ github.sha }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker hub
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS_TOKEN }}
      run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USER_NAME }}/mlops-diabetes:latest
          ${{ secrets.DOCKER_USER_NAME }}/mlops-diabetes:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USER_NAME }}/mlops-diabetes:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USER_NAME }}/mlops-diabetes:buildcache,mode=max
        build-args: |
          PYTHON_VERSION=3.9
          BUILD_ENV=production
        
    - name: Verify Docker image
      run: |
        # Pull the newly built image
        docker pull ${{ secrets.DOCKER_USER_NAME }}/mlops-diabetes:${{ github.sha }}
        
        # Run the container in detached mode
        docker run -d --name test-api -p 8000:8000 ${{ secrets.DOCKER_USER_NAME }}/mlops-diabetes:${{ github.sha }}
        
        # Wait for container to be ready
        echo "Waiting for container to be ready..."
        sleep 15
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health || exit 1
        
        # Test features endpoint
        echo "Testing features endpoint..."
        curl -f http://localhost:8000/features
        
        # Show container logs if any test fails
        if [ $? -ne 0 ]; then
          echo "Tests failed. Container logs:"
          docker logs test-api
          exit 1
        fi
        
        # Cleanup
        echo "Cleaning up test container..."
        docker stop test-api
        docker rm test-api
        